void printMorpionLigne(char l,char c1, char c2, char c3){
    putchar(l);
    putchar('|');
    putchar(c1);
    putchar('|');
    putchar(c2);
    putchar('|');
    putchar(c3);
    putchar('|');
    putchar('\n');
}
void printMorpionLigneTitre(){
    putchar(' ');
    putchar(' ');
    putchar('A');
    putchar(' ');
    putchar('B');
    putchar(' ');
    putchar('C');
    putchar(' ');
    putchar('\n');
}
void printMorpionLigneVide(){
     putchar(' ');
     putchar('+');
     putchar('-');
     putchar('+');
     putchar('-');
     putchar('+');
     putchar('-');
     putchar('+');
    putchar('\n');
}
void printMortPion(char c11, char c21, char c31,char c12, char c22, char c32,char c13, char c23, char c33){
    char c[9];
    int32_t i = 0;
    char l;
    c[0] = c11;c[1] = c21;c[2] = c31;
    c[3] = c12;c[4] = c22;c[5] = c32;
    c[6] = c13;c[7] = c23;c[8] = c33;

    putchar('\n');
    putchar('\n');
    printMorpionLigneTitre();
    while(i<9){
        l = '1' + i/3;
        printMorpionLigneVide();
        printMorpionLigne(l,c[i],c[i+1],c[i+2]);
        i += 3;
    }
    printMorpionLigneVide();
    putchar('\n');
    putchar('\n');
}
int32_t isFull(char c11, char c21, char c31,char c12, char c22, char c32,char c13, char c23, char c33){
    char c[9];
    int32_t i=0;
    c[0] = c11;c[1] = c21;c[2] = c31;
    c[3] = c12;c[4] = c22;c[5] = c32;
    c[6] = c13;c[7] = c23;c[8] = c33;

    while(i < 9){
        if(c[i] == ' ') return 0;
        i++;
    }

    return 1;
}
char getWinner(char c11, char c21, char c31,char c12, char c22, char c32,char c13, char c23, char c33){
    char c[9];
    int32_t i = 0;
    char c2;
    c[0] = c11;c[1] = c21;c[2] = c31;
    c[3] = c12;c[4] = c22;c[5] = c32;
    c[6] = c13;c[7] = c23;c[8] = c33;

    if(c[0] != ' ' && c[0] == c[3] && c[0] == c[6]) return c[0];
    if(c[1] != ' ' && c[1] == c[4] && c[1] == c[7]) return c[1];
    if(c[2] != ' ' && c[2] == c[5] && c[2] == c[8]) return c[2];

    if(c[0] != ' ' && c[0] == c[1] && c[0] == c[2]) return c[0];
    if(c[3] != ' ' && c[3] == c[4] && c[3] == c[5]) return c[3];
    if(c[6] != ' ' && c[6] == c[7] && c[6] == c[8]) return c[6];

    if(c[0] != ' ' && c[0] == c[4] && c[0] == c[8]) return c[0];
    if(c[2] != ' ' && c[2] == c[4] && c[2] == c[6]) return c[2];

    if(isFull(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8])){
        return ' ';
    }else{
        return '\0';
    }
}
void gameOver(char c){
    putchar('G');
    putchar('A');
    putchar('M');
    putchar('E');
    putchar(' ');
    putchar('O');
    putchar('V');
    putchar('E');
    putchar('R');
    putchar('!');
    putchar('!');
    putchar('!');
    putchar('\n');
    putchar('\n');
    if(c==' '){
        putchar('E');
        putchar('g');
        putchar('a');
        putchar('l');
        putchar('i');
        putchar('t');
        putchar('Ã©');
        putchar('\n');
        putchar('\n');
    }else{

        putchar('V');
        putchar('a');
        putchar('i');
        putchar('n');
        putchar('q');
        putchar('u');
        putchar('o');
        putchar('e');
        putchar('u');
        putchar('r');
        putchar(':');
        putchar(' ');
        putchar(c);
        putchar('\n');
        putchar('\n');
    }
}
int32_t readCase(){
    int32_t res = -1;
    char c1 = getchar();
    char c2;
    if(c1 == '\n') return -1;
    c2 = getchar();
    if(c2 == '\n') return -1;
    if(c1 >= 'A' && c1 <= 'C' && c2 >='1' && c2 <= '3') res = c1 - 'A' + (c2 - '1') * 3;
    while(getchar() != '\n'){
        res = -1;
    }
    return res;
}
int32_t getUserPos(char c){
    int32_t res;
    putchar('C');
    putchar('h');
    putchar('o');
    putchar('i');
    putchar('s');
    putchar('i');
    putchar('s');
    putchar('e');
    putchar('z');
    putchar(' ');
    putchar('u');
    putchar('n');
    putchar('e');
    putchar(' ');
    putchar('c');
    putchar('a');
    putchar('s');
    putchar('e');
    putchar(' ');
    putchar(c);
    putchar(' ');
    putchar('(');
    putchar('e');
    putchar('x');
    putchar('e');
    putchar('m');
    putchar('p');
    putchar('l');
    putchar('e');
    putchar(':');

    putchar('\n');
    putchar(c);
    putchar(' ');
    putchar('>');
    res = readCase();

    while(res == -1){
        putchar('C');
        putchar(' ');
        putchar('e');
        putchar('s');
        putchar('t');
        putchar(' ');
        putchar('p');
        putchar('a');
        putchar('s');
        putchar(' ');
        putchar('u');
        putchar('n');
        putchar('e');
        putchar(' ');
        putchar('c');
        putchar('a');
        putchar('s');
        putchar('e');
        putchar(' ');
        putchar('c');
        putchar('a');
        putchar(':');
        putchar('\n');
        putchar(c);
        putchar(' ');
        putchar('>');
        res = readCase();
    }
    return res;
}
void printInvalidePos(){
    putchar('C');
    putchar('a');
    putchar('s');
    putchar('e');
    putchar(' ');
    putchar('d');
    putchar('e');
    putchar('j');
    putchar('a');
    putchar(' ');
    putchar('p');
    putchar('l');
    putchar('a');
    putchar('i');
    putchar('n');
    putchar('!');
    putchar('\n');
}
void lunchGame(){
    char c[9];
    char winner = '\0';
    char player = 'O';
    int32_t pos;
    c[0] = ' ';c[1] = ' ';c[2] = ' ';
    c[3] = ' ';c[4] = ' ';c[5] = ' ';
    c[6] = ' ';c[7] = ' ';c[8] = ' ';


    while(!winner){
        printMortPion(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8]);
        pos = getUserPos(player);
        while(c[pos] != ' '){
            printInvalidePos();
            pos = getUserPos(player);
        }
        c[pos] = player;
        player = (player == 'O' && 'X') || 'O';

        winner = getWinner(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8]);
    }
    printMortPion(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8]);
    gameOver(winner);
}
void main(){
    lunchGame();
}